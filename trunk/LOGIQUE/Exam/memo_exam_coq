Lemma and_imp_dist : (P->Q) /\ (R->S) -> P /\ R -> Q /\ S.

------------------- assumption.  ------------------- assumption.
H1, H2, p, r |-- P               H1, H2, p, r |-- R
------------------- apply H1.    -------------------- apply H2.
H1, H2, p, r |-- Q               H1, H2, p, r |-- S
------------------------------------------------ split.
H1, H2, P, R |-- Q /\ S
-------------------------- destruct H0 as [p r].
P->Q, R->S, H0 |-- Q /\ S
-------------------------- destruct H as [H1 H2].
H, P /\ R |-- Q /\ S
------------------------------------- intro H0.
(P->Q) /\ (R->S) |-- P /\ R -> Q /\ S
--------------------------------------- intro H.
|-- (P->Q) /\ (R->S) -> P /\ R -> Q /\ S

==================================================================================

Lemma not_contrad : ~(P /\ ~P).

-------- assumption.
P |-- P
--------------- destruct H2.
P, ~P |-- False
----------------- destruct H as [H1 H2].
P /\ ~P |-- False
--------------- intro H.
|-- ~(P /\ ~P)

==================================================================================

Lemma ord_and_not : (P \/ Q) /\ ~P -> Q.

------- assumption.
P |-- P
----------- destruct H1.  ----------- assumption.
P, ~P |-- Q               Q, ~P |-- Q
------------------------------------- destruct H0 as [p | q].
(P \/ Q), ~P |-- Q
--------------------- destruct H as [H0 H1]. 
(P \/ Q) /\ ~P |-- Q
----------------------- intro H.
|-- (P \/ Q) /\ ~P -> Q

==================================================================================

Lemma not_not_exm : ~ ~(P \/ ~P).

-------- assumption.
P |-- P
-------------- left.                  --------- assumption.
P |-- P \/ ~P                         ~P |-- ~P
----------------------- destruct H.   --------------- right.
~(P \/ ~P), P |-- False               ~P |-- P \/ ~P 
----------------------- intro p.      ------------------------- destruct H. 
~(P \/ ~P) |-- ~P                     ~(P \/ ~P), ~P |-- False
--------------------------------------------------------------- assert (H0: ~P).
~(P \/ ~P) |-- False
--------------------- intro H. 
|-- ~ ~(P \/ ~P)

==================================================================================

Lemma de_morgan_3 : ~P \/ ~Q -> ~(P /\ Q).

----------- assumption.               ----------- assumption.
P, Q |-- P                            P, Q |-- Q
------------------ destruct H.        ------------------ destruct H.
~P, P, Q |-- False                    ~Q, P, Q |-- False
------------------ intros [p | q].    ------------------ intros [p | q].
~P |-- ~(P /\ Q)                      ~Q |-- ~(P /\ Q)
--------------------------------------------------------- intros [H | H] 
|-- ~P \/ ~Q -> ~(P /\ Q).

==================================================================================

Lemma forall_imp_dist : (forall x:A, P x -> Q x) -> 
						(forall x:A, P x) -> 
						forall x:A, Q x.
						
						
-------------------------------------------------------- apply H0.
(forall x:A, P x -> Q x), (forall x:A, P x), x |--  P x
-------------------------------------------------------- apply H.
(forall x:A, P x -> Q x), (forall x:A, P x), x |--  Q x
---------------------------------------------------------------- intro x.
(forall x:A, P x -> Q x), (forall x:A, P x) |-- forall x:A, Q x
-------------------------------------------------------------------- intros H H0.
|-- (forall x:A, P x -> Q x) -> (forall x:A, P x) -> forall x:A, Q x

==================================================================================

Lemma forall_delta : (forall x y:A, R x y) -> forall x, R x x.

------------------------------------ apply H.
(forall x y:A, R x y), x |--  R x x
------------------------------------------- intro x.
(forall x y:A, R x y) |--  forall x, R x x
--------------------------------------------- intro H.
|-- (forall x y:A, R x y) -> forall x, R x x

==================================================================================

Lemma exists_or_dist : (exists x:A, P x \/ Q x) <->
					   (exists x, P x) \/ (exists x, Q x).


-------------- assumption.                          -------------- assumption.
x, P x |-- P x                                      x, Q x |-- Q x
---------------------- left.                        ---------------------- right.
x, P x |-- P x \/ Q x                               x, Q x |-- P x \/ Q x
-------------------------------------- exists x.    ------------------------------------ exists x.					
x, P x |-- (exists x0:A, P x0 \/ Q x0)              x, Q x |-- (exists x:A, P x \/ Q x)
---------------------------------------------------------------------------------------- intros [ [x Hp] | [x Hq]].
|-- (exists x, P x) \/ (exists x, Q x) -> (exists x:A, P x \/ Q x)
------------------------------------------------------------------- split.	(2eme partie)

.
.
.


--------------- assumption.                          --------------- assumption.
x, P x |-- P x                                       x, Q x |-- Q x 
-------------------------- exists x.                 --------------------------- exists x.
x, P x |-- exists x0, P x0                           x, Q x |-- exists x0, Q x0
--------------------------------------------- left.  --------------------------------------------- right.
x, P x |-- (exists x, P x) \/ (exists x, Q x)        x, Q x |-- (exists x, P x) \/ (exists x, Q x)
--------------------------------------------------------------------------------------------------- destruct H as [Hp Hq].
x, P x \/ Q x |-- (exists x, P x) \/ (exists x, Q x)
---------------------------------------------------------------- destruct H as [x H].
(exists x:A, P x \/ Q x) |-- (exists x, P x) \/ (exists x, Q x)
------------------------------------------------------------------- intro H.
|-- (exists x:A, P x \/ Q x) -> (exists x, P x) \/ (exists x, Q x)     
-------------------------------------------------------------------- split.	(1ere partie)		
|-- (exists x:A, P x \/ Q x) <-> (exists x, P x) \/ (exists x, Q x).
