Definition Double_neg : Prop := forall P:Prop, ~~P -> P.

Definition Exm : Prop := forall P : Prop, P \/ ~P.

Definition Classical_impl : Prop := forall P Q:Prop, (P -> Q) -> ~P \/ Q.

Definition Peirce : Prop := forall P Q : Prop, ((P -> Q) -> P) -> P.

Definition Not_forall_not_exists : Prop := 
           forall (A:Type)(P:A->Prop), ~(forall x:A, ~P x) -> ex P.

==================================================================================

Lemma  Exm_Double_neg : Exm -> Double_neg.

                                    -------------------- assumption. 
                                     ~P, P:Prop |-- ~P 
---------------------- assumption.  -------------------------- destruct nnp. 
P, P:Prop, ~~P |-- P                 ~P, P:Prop, ~~P |-- P
---------------------- intro nnp.   -------------------------- intro nnp.
P, P:Prop |-- ~~P -> P               ~P, P:Prop |-- ~~P -> P
-------------------------------------------------------------- destruct (H P) as [p | np].
(forall P : Prop, P \/ ~P), P:Prop |-- ~~P -> P
--------------------------------------------------------- intro P.
(forall P : Prop, P \/ ~P) |-- (forall P:Prop, ~~P -> P)
--------------------------------------------------------- intro H. 
|-- Exm -> Double_neg

==================================================================================

Lemma Double_neg_Exm :  Double_neg -> Exm.


------------------------------------------ assumption.
(forall P:Prop, ~~P -> P), P:Prop, P |-- P 
------------------------------------------------- left.                    ---------------------------------------------- assumption.
(forall P:Prop, ~~P -> P), P:Prop, P |-- P \/ ~P                           (forall P:Prop, ~~P -> P), P:Prop, ~P  |--  ~P
---------------------------------------------------------- destruct H0.    --------------------------------------------------- right 
(forall P:Prop, ~~P -> P), P:Prop, ~(P \/ ~P), P |-- False                 (forall P:Prop, ~~P -> P), P:Prop, ~P  |--  P \/ ~P
---------------------------------------------------------- intro p.        ------------------------------------------------------------- destruct H0 
(forall P:Prop, ~~P -> P), P:Prop, ~(P \/ ~P)  |--  ~P                     (forall P:Prop, ~~P -> P), P:Prop, ~(P \/ ~P), ~P  |--  False
---------------------------------------------------------------------------------------------------------------------------------------- assert (H1: ~P)
(forall P:Prop, ~~P -> P), P:Prop, ~(P \/ ~P)  |--  False
---------------------------------------------------------- intro H0.
(forall P:Prop, ~~P -> P), P:Prop |--  ~~(P \/ ~P)
--------------------------------------------------- apply H.
(forall P:Prop, ~~P -> P), P:Prop |--   P \/ ~P
--------------------------------------------------------- intro P
(forall P:Prop, ~~P -> P) |--  (forall P : Prop, P \/ ~P)
--------------------------------------------------------- intro H. 
|-- Double_neg -> Exm.


==================================================================================

Lemma Peirce_Double_neg : Peirce -> Double_neg.

------------------------------------------------------------------ assumption.
(forall P Q : Prop, ((P -> Q) -> P) -> P), P:Prop, ~~P, ~P |--  ~P
------------------------------------------------------------------ destruct nnP.
(forall P Q : Prop, ((P -> Q) -> P) -> P), P:Prop, ~~P, ~P |--  P
----------------------------------------------------------------------------- intro nP.
(forall P Q : Prop, ((P -> Q) -> P) -> P), P:Prop, ~~P |-- (P -> False) -> P
----------------------------------------------------------------------------- 
(forall P Q : Prop, ((P -> Q) -> P) -> P), P:Prop, ~~P |-- P
------------------------------------------------------------- apply H with False
(forall P Q : Prop, ((P -> Q) -> P) -> P), P:Prop, ~~P |-- P
----------------------------------------------------------------------- intros P nnP.
(forall P Q : Prop, ((P -> Q) -> P) -> P) |-- (forall P:Prop, ~~P -> P)
----------------------------------------------------------------------- intro H.
|-- Peirce -> Double_neg

==================================================================================

Lemma Classical_impl_Exm : Classical_impl -> Exm.


----------- assumption.                              ------------- assumption    ------------- assumption
Γ, P |-- P                                           Γ, np:~P |-- ~P             Γ, p:P |-- P
----------------------------------------- intro H0.  ------------------ right.   ------------------ left. 
Γ :{ Classical_impl, P:Prop } |-- P -> P             Γ, np:~P |-- P \/ ~P        Γ, p:P |-- P \/ ~P
------------------------------------------------------------------------------------------------------- destruct (H P P) as [np | p].
(forall P Q:Prop, (P -> Q) -> ~P \/ Q), P:Prop |-- P \/ ~P
---------------------------------------------------------------------- intro P.
(forall P Q:Prop, (P -> Q) -> ~P \/ Q) |-- (forall P : Prop, P \/ ~P)
---------------------------------------------------------------------- intro H.
|-- Classical_impl -> Exm

==================================================================================

Lemma Exm_Classical_impl : Exm -> Classical_impl.

-------------------- assumption.
Γ, P -> Q, P |--  P
-------------------- apply H0.    -------------------- assumption.
Γ, P -> Q, P |--  Q               Γ, P -> Q, ~P |-- ~P
------------------------- right.  -------------------------- left. 
Γ, P -> Q, P |-- ~P \/ Q          Γ, P -> Q, ~P |-- ~P \/ Q
-------------------------------------------------------------------- destruct (H P) as [p | np]
Γ: {(forall P : Prop, P \/ ~P), P:Prop, Q:Prop}, P -> Q |-- ~P \/ Q
---------------------------------------------------------------------- intros P Q H0.
(forall P : Prop, P \/ ~P) |-- (forall P Q:Prop, (P -> Q) -> ~P \/ Q)
---------------------------------------------------------------------- intro H. 
|--  Exm -> Classical_impl


==================================================================================
Rappel : (ex P) avec P:A->Prop est équivalent a (exists x, P x) avec P:Prop.

Lemma Not_forall_not_exists_Double_neg :  Not_forall_not_exists -> Double_neg.



------------------------ exact 0.
Γ, (nat -> ~P), |-- nat
------------------------ apply H1.
Γ, (nat -> ~P), |-- ~P
------------------------------ destruct nnP.
Γ, ~~P, (nat -> ~P), |-- False
------------------------------ intro H1.                        ------------------- assumption. 
Γ, ~~P |-- ~(nat -> ~P)                                         Γ, ~~P, x, P |-- P
----------------------------------------------------------------------------------- destruct (H nat (fun n => P)) as [x P].
Γ : { (forall (A:Type)(P:A->Prop), ~(forall x:A, ~P x) -> ex P), P:Prop}, ~~P |-- P
----------------------------------------------------------------------------------- intro nnP.
(forall (A:Type)(P:A->Prop), ~(forall x:A, ~P x) -> ex P), P:Prop |--  ~~P -> P
-------------------------------------------------------------------------------------- intro P.
(forall (A:Type)(P:A->Prop), ~(forall x:A, ~P x) -> ex P) |-- forall P:Prop, ~~P -> P
-------------------------------------------------------------------------------------- intro H. 
|-- Not_forall_not_exists -> Double_neg


==================================================================================
Rappel : (ex P) avec P:A->Prop est équivalent a (exists x, P x) avec P:Prop.

Lemma Exm_Not_forall_not_exists: Exm -> Not_forall_not_exists.


                                                    --------------------- assumption.
                                                    Γ,  x, P x |--  P x 
                                                    --------------------- exists x.
                                                    Γ,  x, P x |--  ex P 
                                                    ------------------------------ destruct nE.
                                                    Γ, ~ ex P, x, P x |-- False
                                                    ------------------------------ intros x Hx. 
                                                    Γ, ~ ex P |-- forall x:A, ~P x
-------------------------------------- assumption.  ----------------------------------------- destruct H0. 
Γ,  ~(forall x:A, ~P x), ex P |-- ex P              Γ,  ~(forall x:A, ~P x), ~ ex P |-- ex P
--------------------------------------------------------------------------------------------- destruct (H (ex P)) as [E nE].
Γ : {(forall P : Prop, P \/ ~P), A:Type, P:A->Prop} , ~(forall x:A, ~P x) |--  ex P
----------------------------------------------------------------------------------------- intros A P H0.
(forall P : Prop, P \/ ~P) |-- (forall (A:Type)(P:A->Prop), ~(forall x:A, ~P x) -> ex P) 
----------------------------------------------------------------------------------------- intro H. 
|-- Exm -> Not_forall_not_exists


==================================================================================




















